import axios, { AxiosResponse } from "axios";
// import imageCompression from "browser-image-compression";

let noImageBase64 =
  "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";

async function getUrlToArrayBuffer(url: string): Promise<ArrayBuffer> {
  const response: AxiosResponse<ArrayBuffer> = await axios.get(url, {
    responseType: "arraybuffer",
  });

  return response.data;
}

// function blobToFile(blob: Blob, filename: string) {
//   const options = { type: blob.type };
//   return new File([blob], filename, options);
// }

// function blobToBuffer(blob: Blob): Promise<Buffer> {
//   return new Promise<Buffer>((resolve, reject) => {
//     const reader = new FileReader();

//     reader.onloadend = () => {
//       const arrayBuffer = reader.result as ArrayBuffer;
//       const buffer = Buffer.from(arrayBuffer);
//       resolve(buffer);
//     };

//     reader.onerror = reject;

//     reader.readAsArrayBuffer(blob);
//   });
// }

export default async function getImageByUrl(url: string) {
  console.log(`Buscando imagem ${url}`);

  try {
    const fileArrayBuffer = await getUrlToArrayBuffer(url);

    // COMPRIMINDO ARQUIVO
    // const blob = new Blob([fileArrayBuffer], { type: "image/jpeg" });
    // const file = blobToFile(blob, "url");
    // const compress = await imageCompression(file, {
    //   maxWidthOrHeight: 80,
    // });
    // const compressBuffer = await blobToBuffer(compress);
    // return compressBuffer;

    return Buffer.from(fileArrayBuffer).toString("base64");
  } catch (error) {
    console.log(error);

    return noImageBase64;
  }
}
